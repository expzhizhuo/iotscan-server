"""
Django settings for iotscan project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os.path
import sys
import datetime
from pathlib import Path
from kombu import Queue, Exchange
from config.config import Config

# import apps.task.tasks

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-&4)2^dhaf6*d73_%cc-ybo*uwjyjmqwb0%8xjqxb^#*6)sz*jn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许所有host请求
ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    # jwt黑名单配置
    'rest_framework_simplejwt.token_blacklist',
    # 在线接口文档生成器
    'drf_yasg',

    # apps注册
    'apps.models',
    'apps.user',
    'apps.tools',
    'apps.task',
    'apps.home',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 自定义认证错误状态返回
    'apps.user.utils.AuthProcess.ExceptionChange',

]

ROOT_URLCONF = 'iotscan.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'iotscan.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'dj_db_conn_pool.backends.mysql',
        'HOST': Config.MYSQL_HOST,  # 数据库主机,
        'PORT': Config.MYSQL_PORT,  # 数据库端口
        'USER': Config.MYSQL_USER,  # 数据库用户名
        'PASSWORD': Config.MYSQL_PASSWORD,  # 数据库用户密码
        'NAME': 'iotscan',  # 数据库名字
        'OPTIONS': {},
        'POOL_OPTIONS': {
            'POOL_SIZE': 100,  # 连接池数量
            'MAX_OVERFLOW': 20,  # 最大溢出数量
            'RECYCLE': 60,  # 重新连接的时间
            'PRE_PING': True
        },
    }
}


# 缓存配置文件
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{Config.REDIS_HOST}:{Config.REDIS_PORT}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 1000},
            # 这里只配置了密码没有配置用户名所以这里不需要用户名
            "USERNAME": Config.REDIS_USER,
            "PASSWORD": Config.REDIS_PASSWORD,
        },
        'CONNECTION_POOL_CLASS': 'redis.connection.BlockingConnectionPool',
    }
}

# rest framework配置
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    # 关闭API调试界面
    'DEFAULT_RENDERER_CLASSES': ('rest_framework.renderers.JSONRenderer',),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'BLACKLIST_ENABLE': True,  # 启用jwt黑名单检查
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_TOKEN_CHECKS': [
        'rest_framework_simplejwt.token_blacklist.models.blacklisted_token_check',
        'rest_framework_simplejwt.token_blacklist.check_blacklisted_user',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '10/min',  # 匿名用户每分钟5个请求
        'user': '50/min',  # 登陆用户每分钟可以50个请求
        'limit_per_minute': '5/min',  # 每分钟限速
        'limit_per_hour': '500/hour',  # 每小时限速
    },
    'PAGE_SIZE': 10,
    'MAX_PAGE_SIZE': 1000
}
# 在 setting 配置认证插件的参数
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'UPDATE_LAST_LOGIN': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',  # 认证信息位置
    'AUTH_HEADER_TYPES': ('Bearer', 'token'),  # 认证类型 如 Authorization：Bearer token
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': datetime.timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': datetime.timedelta(days=1),
}

# 指定使用自定义的模型类
AUTH_USER_MODEL = 'models.AuthUser'

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# 全局时间格式
DATETIME_FORMAT = '%Y-%m-%d %H:%M:%S'
USE_L10N = True
DATE_FORMAT = 'Y-m-d'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 日志配置文件
cur_path = os.path.dirname(os.path.realpath(__file__))
log_path = os.path.join(os.path.dirname(cur_path), 'logs')  # 如果不存在这个logs文件夹，就需要手动创建一个
POC_PLUGIN_PATH = os.path.join(os.path.dirname(cur_path), 'poc_plugin')  # 自定义的POC插件路径
REPORT_FILE_PATH = os.path.join(os.path.dirname(cur_path), 'report')  # 生成报告路径

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        # 日志格式
        'standard': {
            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
                      '[%(levelname)s]- %(message)s'},
        'simple': {  # 简单格式
            'format': '%(levelname)s %(message)s'
        },
    },
    # 过滤
    'filters': {
    },
    # 定义具体处理日志的方式
    'handlers': {
        # 默认记录所有日志
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path,
                                     'all-{}.log'.format(datetime.datetime.now().strftime("%Y-%m-%d"))),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        # 输出错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'error-{}.log'.format(datetime.datetime.now().strftime("%Y-%m-%d"))),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码
        },
        # 控制台输出
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        # 输出info日志
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'info-{}.log'.format(datetime.datetime.now().strftime("%Y-%m-%d"))),
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',  # 设置默认编码
        },
    },
    'home-api': {
        'handlers': ['error', 'info', 'console', 'default'],
        'level': 'INFO',
        'propagate': True
    },
    # 配置用哪几种 handlers 来处理日志
    'loggers': {
        # 类型 为 django 处理所有类型的日志， 默认调用
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': False
        },
        # log 调用时需要当作参数传入
        'users': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': True
        },
        'tools-api': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': True
        },
        'common': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': True
        },
        # celery tasks 调用时需要当作参数传入
        'tasks-server-api': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'INFO',
            'propagate': True
        },
    }
}

# celery配置文件
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_BROKER_URL = f'redis://{Config.REDIS_USER}:{Config.REDIS_PASSWORD}@{Config.REDIS_HOST}:{Config.REDIS_PORT}/5'
# 设置redis的5号数据库来存放结果
CELERY_RESULT_BACKEND = f'redis://{Config.REDIS_USER}:{Config.REDIS_PASSWORD}@{Config.REDIS_HOST}:{Config.REDIS_PORT}/6'
# 设置redis的6号数据库存放消息中间件
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_TIME_LIMIT = 60 * 60 * 2  # 限制celery任务执行时间，单个任务的运行时间限制
CELERYD_TASK_SOFT_TIME_LIMIT = 60 * 60 * 1.5  # 单个任务的运行时间不超过此值(秒)，否则会抛出(SoftTimeLimitExceeded)异常停止任务
# 设置并发worker数量 也是命令行-c指定的数目
CELERYD_CONCURRENCY = 50
# 有些情况可以防止死锁
CELERYD_FORCE_EXECV = True
# 允许重试
CELERY_ACKS_LATE = True
# 每个worker最多执行500个任务被销毁，可以防止内存泄漏
CELERYD_MAX_TASKS_PER_CHILD = 200
# worker每次去队列中取任务的数量
CELERYD_PREFETCH_MULTIPLIER = 100
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}  # 连接超时
CELERY_DEFAULT_QUEUE = 'default'
CELERY_DEFAULT_EXCHANGE = 'default'
CELERY_DEFAULT_ROUTING_KEY = 'default'
# 路由
CELERY_TASK_ROUTES = {
    # 需要任务调度的类
    'apps.task.tasks.iotscan_create': {'queue': 'default'},
    'apps.task.tasks.iotscan-server-remove-task': {'queue': 'default'},
    'apps.task.tasks.iotscan_pocscan': {'queue': 'pocscan'},
    'apps.task.tasks.iotscan_portscan': {'queue': 'portscan'},
    'apps.task.tasks.iotscan_fingerscan': {'queue': 'fingerscan'},
    'apps.task.tasks.iotscan_backupscan': {'queue': 'datascan'},
}
