# Generated by Django 4.2.5 on 2024-01-30 05:03

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=50, verbose_name='邮箱')),
                ('username', models.CharField(max_length=20, unique=True, verbose_name='用户名')),
                ('password', models.CharField(max_length=255, verbose_name='密码')),
                ('phone', models.CharField(max_length=11, unique=True, verbose_name='手机号')),
                ('permissions', models.IntegerField(choices=[(0, '普通用户权限'), (1, '管理员权限')], default=1, verbose_name='用户的身份权限')),
                ('last_login_ip', models.GenericIPAddressField(default='127.0.0.1', verbose_name='登陆ip')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TargetManager',
            fields=[
                ('id', models.UUIDField(primary_key=True, serialize=False)),
                ('host', models.TextField(verbose_name='目标地址')),
                ('desc', models.CharField(blank=True, default=None, max_length=50, null=True, verbose_name='任务描述')),
                ('status', models.IntegerField(choices=[(0, '初始化'), (1, '进行中'), (2, '完成'), (3, '删除'), (4, '失败'), (5, '未知错误')], default=0, verbose_name='任务状态')),
                ('proxy_type', models.IntegerField(choices=[(0, '不使用代理'), (1, '使用代理')], default=0, verbose_name='是否使用代理')),
                ('poc_type', models.IntegerField(choices=[(-1, '不使用poc'), (0, '全部'), (1, '低危'), (2, '中危'), (3, '高危'), (4, '严重'), (5, '特定poc扫描')], default=0, verbose_name='使用的poc类型')),
                ('scanning_speed', models.IntegerField(blank=0, choices=[(0, '低速'), (1, '中速'), (2, '高速')], default=1, verbose_name='扫描速度')),
                ('task_count', models.IntegerField(default=0, verbose_name='任务数量')),
                ('finish_task_count', models.IntegerField(default=0, verbose_name='任务完成数量')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_scan_name', to=settings.AUTH_USER_MODEL, verbose_name='任务创建者')),
            ],
            options={
                'db_table': 'target_manager',
            },
        ),
        migrations.CreateModel(
            name='Vulnerability',
            fields=[
                ('id', models.UUIDField(auto_created=True, primary_key=True, serialize=False)),
                ('poc_name', models.CharField(db_index=True, max_length=255, verbose_name='poc名称')),
                ('file_name', models.CharField(max_length=255, verbose_name='pocsuite3漏洞文件名字')),
                ('vul_author', models.CharField(max_length=50, null=True, verbose_name='poc作者名字')),
                ('vul_name', models.CharField(max_length=255, verbose_name='漏洞应用名称')),
                ('vul_range', models.CharField(blank=True, max_length=255, null=True, verbose_name='漏洞影响范围')),
                ('vul_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='漏洞类型')),
                ('vul_desc', models.TextField(blank=True, null=True, verbose_name='漏洞描述')),
                ('vul_leakLevel', models.IntegerField(blank=True, choices=[(4, '严重漏洞'), (3, '高危漏洞'), (2, '中危漏洞'), (1, '低危漏洞'), (0, '提示信息')], default=1, null=True, verbose_name='漏洞等级')),
                ('vul_device_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='设备类型')),
                ('vul_permissions', models.IntegerField(choices=[(0, '注册用户权限'), (1, '管理员权限')], default=1, verbose_name='poc执行结果查看权限')),
                ('vul_vulDate', models.DateField(default=django.utils.timezone.now, verbose_name='漏洞公开日期')),
                ('vul_createDate', models.DateField(default=django.utils.timezone.now, verbose_name='poc编写时间')),
                ('vul_updateDate', models.DateField(default=django.utils.timezone.now, verbose_name='poc更新时间')),
                ('is_active', models.CharField(default=True, max_length=10, verbose_name='是否启用')),
                ('has_exp', models.BooleanField(default=False, verbose_name='是否有exp')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vul_user_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'vulnerability',
            },
        ),
        migrations.CreateModel(
            name='TargetToPocs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leaking_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.vulnerability', verbose_name='关联漏洞表')),
                ('target_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.targetmanager', verbose_name='关联任务管理表')),
            ],
            options={
                'db_table': 'target_to_poc',
            },
        ),
        migrations.AddField(
            model_name='targetmanager',
            name='poc_warehouse_ids',
            field=models.ManyToManyField(related_name='poc_plugins', through='models.TargetToPocs', to='models.vulnerability'),
        ),
        migrations.CreateModel(
            name='ProxySetting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('host', models.CharField(max_length=50, verbose_name='代理设置的host地址')),
                ('port', models.CharField(max_length=5, verbose_name='代理运行的端口')),
                ('proxy_username', models.CharField(blank=True, max_length=20, null=True, verbose_name='代理认证用户名')),
                ('proxy_password', models.CharField(blank=True, max_length=100, null=True, verbose_name='代理认证密码')),
                ('proxy_type', models.CharField(choices=[('HTTP', 'HTTP'), ('HTTPS', 'HTTPS'), ('SOCKS5', 'SOCKS5')], default='HTTP', max_length=10, verbose_name='代理类型')),
                ('proxy_status', models.CharField(choices=[(True, '启用'), (False, '不启用')], default=False, max_length=10, verbose_name='代理状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='更新时间')),
                ('create_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='proxy_user_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'proxy_setting',
            },
        ),
        migrations.CreateModel(
            name='IotTasks',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('business_type', models.IntegerField(choices=[(1, '目标扫描'), (2, '端口扫描')], verbose_name='任务类型，目标扫描任务or端口扫描任务')),
                ('task_id', models.CharField(max_length=200, verbose_name='celery任务ID')),
                ('params', models.TextField(blank=True, default=None, null=True, verbose_name='任务参数:任务丢失后重启所使用参数')),
                ('result', models.TextField(blank=True, default=None, null=True, verbose_name='任务结果')),
                ('status', models.IntegerField(choices=[(0, '初始化'), (1, '进行中'), (2, '完成'), (3, '失败'), (4, '删除'), (5, '未知错误')], default=0, verbose_name='celery任务状态')),
                ('start_time', models.DateTimeField(auto_now_add=True, verbose_name='任务开始时间')),
                ('remark', models.CharField(blank=True, default=None, max_length=800, null=True, verbose_name='异常信息')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='任务完成时间')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='任务创建时间')),
                ('update_time', models.DateTimeField(auto_now=True, null=True, verbose_name='任务更新时间')),
                ('business_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_iot_target', to='models.targetmanager', verbose_name='任务id')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='create_user', to=settings.AUTH_USER_MODEL, verbose_name='任务创建的用户')),
                ('leaking_house', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_leaking_target', to='models.vulnerability', verbose_name='使用的POC')),
            ],
            options={
                'db_table': 'iot_tasks',
            },
        ),
        migrations.CreateModel(
            name='IotTaskPortResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('scan_host', models.CharField(max_length=20, verbose_name='端口扫描的host地址')),
                ('scan_result', models.TextField(blank=True, default=None, null=True, verbose_name='扫描端口的结果，json格式')),
                ('status', models.IntegerField(choices=[(0, 'failure '), (1, 'success')], default=1, verbose_name='端口扫描状态')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间/任务完成时间')),
                ('iot_task_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_port_result_id', related_query_name='任务id', to='models.iottasks')),
                ('target_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iot_task_port_result_ids', related_query_name='主任务id', to='models.targetmanager')),
            ],
            options={
                'db_table': 'iot_tasks_port_result',
            },
        ),
        migrations.CreateModel(
            name='IotTaskPocResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[(0, 'failure '), (1, 'success')], default=1, verbose_name='POC状态')),
                ('host', models.CharField(max_length=130, verbose_name='目标地址')),
                ('result', models.TextField(blank=True, default=None, null=True, verbose_name='POC执行结果')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间/任务完成时间')),
                ('iot_task_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_poc_result_id', related_query_name='任务id', to='models.iottasks')),
                ('target_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iot_task_poc_result_ids', related_query_name='主任务id', to='models.targetmanager')),
                ('vul_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='task_result_leaking_house', to='models.vulnerability')),
            ],
            options={
                'db_table': 'iot_tasks_poc_result',
            },
        ),
        migrations.CreateModel(
            name='IotTaskFingerResult',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('host', models.GenericIPAddressField(verbose_name='host地址')),
                ('url', models.CharField(max_length=255, verbose_name='url地址')),
                ('scheme', models.CharField(blank=True, max_length=255, null=True, verbose_name='http的协议类型')),
                ('cms', models.CharField(blank=True, max_length=255, null=True, verbose_name='指纹信息')),
                ('title', models.TextField(blank=True, null=True, verbose_name='站点的title信息')),
                ('status_code', models.IntegerField(blank=True, null=True, verbose_name='站点状态码')),
                ('redirect_num', models.IntegerField(default=0, verbose_name='站点重定向or跳转次数')),
                ('server', models.CharField(blank=True, max_length=255, null=True, verbose_name='站点的server信息')),
                ('is_cdn', models.BooleanField(default=False, verbose_name='站点是否有cdn')),
                ('cdn_ip_list', models.TextField(blank=True, null=True, verbose_name='域名转ip，验证cdn产生的ip信息')),
                ('icon_hash', models.CharField(blank=True, max_length=255, null=True, verbose_name='icon hash')),
                ('cert', models.TextField(blank=True, null=True, verbose_name='ssl证书信息')),
                ('icp', models.CharField(blank=True, default=None, max_length=100, null=True, verbose_name='ICP备案信息')),
                ('res_headers', models.TextField(blank=True, null=True, verbose_name='响应头')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间/任务完成时间')),
                ('target_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='iot_task_finger_result_ids', related_query_name='主任务id', to='models.targetmanager')),
            ],
            options={
                'db_table': 'iot_tasks_finger_result',
            },
        ),
        migrations.CreateModel(
            name='FofaSetting',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('fofa_email', models.CharField(max_length=50, verbose_name='fofa邮箱配置')),
                ('fofa_key', models.CharField(max_length=100, verbose_name='fofa key配置')),
                ('fofa_size', models.IntegerField(default=100, verbose_name='fofa api最大获取数据条数')),
                ('fofa_status', models.CharField(default=False, max_length=10, verbose_name='是否启用，默认不启用')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='报告的生成时间')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='FofatUser', to=settings.AUTH_USER_MODEL, verbose_name='创建fofa api配置用户')),
            ],
            options={
                'db_table': 'fofa_setting',
            },
        ),
        migrations.CreateModel(
            name='ExportReport',
            fields=[
                ('id', models.UUIDField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='报告名字')),
                ('filename', models.CharField(max_length=200, verbose_name='生成的报告文件名字')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='报告的生成时间')),
                ('create_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ExportReportUser', to=settings.AUTH_USER_MODEL, verbose_name='创建导出的用户')),
            ],
            options={
                'db_table': 'export_report',
            },
        ),
        migrations.AddIndex(
            model_name='vulnerability',
            index=models.Index(fields=['vul_author', 'vul_name', 'vul_type', 'vul_leakLevel', 'vul_device_name', 'vul_vulDate'], name='vulnerabili_vul_aut_85d519_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='targettopocs',
            unique_together={('target_id', 'leaking_id')},
        ),
        migrations.AlterIndexTogether(
            name='targettopocs',
            index_together={('target_id', 'leaking_id')},
        ),
        migrations.AlterIndexTogether(
            name='iottasks',
            index_together={('business_id', 'business_type', 'status', 'task_id')},
        ),
    ]
